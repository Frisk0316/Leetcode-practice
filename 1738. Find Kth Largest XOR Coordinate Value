// finished at 2023/05/06, used C++
// Runtime beats 5.41%
// Memory beats 94.17%

class Solution {
public:
    int kthLargestValue(vector<vector<int>>& matrix, int k) {
        int n = matrix.size(), m = matrix[0].size();

        // prefix XOR for rows
        for(int i = 0; i < n; i++) {
            for(int j = 1; j < m; j++) {
                matrix[i][j] ^= matrix[i][j-1];
            }
        }
        
        // prefix XOR for columns
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < m; j++) {
                matrix[i][j] ^= matrix[i-1][j];
            }
        }
        
        priority_queue<int, vector<int>, greater<int>> pq; 
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                pq.push(matrix[i][j]);
                if(pq.size() > k)
                    pq.pop();
            }
        }
        
        return pq.top();        
        
    }
};
