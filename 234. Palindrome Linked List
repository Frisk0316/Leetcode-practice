/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 
// 2023.04.21 wrote by C++
// Runtime beats 78.25%
// Memory beats 87.14%

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;

        while(fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }   

        if(fast != NULL && fast -> next == NULL) {
            slow = slow->next;
        }

        ListNode *prev = NULL;
        ListNode *temp = NULL;

        while(slow != NULL && slow->next != NULL) {
            temp = slow->next;
            slow->next = prev;
            prev = slow;
            slow = temp;
        }

        if(slow != NULL) {
            slow->next = prev;
        }

        fast = head;
        while(slow && fast) {
            if(slow->val != fast->val) { return false; break; }

            slow = slow->next;
            fast = fast->next;
        }
        
        return true;
    }
};
